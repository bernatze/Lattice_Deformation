macro "PipetteAssayMeasurement [1]" {

//---Added by HM---//
print("\\Clear");

	getPixelSize(unt,wid,hei);
	a = endsWith(unt, "m");
	if(a==0) {
		run("Properties...");
	}
	b = startsWith(unt, "c");
	if(b==1) {
		run("Properties...");
	}

	seltyp = selectionType();

	a = 0;
	if(seltyp == 5) {
		a = 1;
	}
	while(a==0) {
		setTool("line");
		waitForUser(" Make a LINE for the measurement. ");
		wait(10);
		seltyp = selectionType();
		if(seltyp == 5) {
			a = 1;
		}
	}

	orititle = getTitle();
	title = File.nameWithoutExtension;
	getDimensions(w, h, ch, sli, fra);
	getLine(x1,y1,x2,y2,wid);
//-----------------//

	currentSlice = getSliceNumber();
	Dialog.create("Plot Right-Most Dark Peak");
	Dialog.addNumber("First frame", currentSlice);
	Dialog.addNumber("Last frame", nSlices); //- 1);
	Dialog.addMessage("The threshold is the percentage of the average\nof the right half profile in the first frame");
	Dialog.addNumber("Threshold (in percent)", 80);
	Dialog.addCheckbox("Show_kymograph", !false);
	Dialog.addCheckbox("Critical pressure measurement", false);  //added by HM
	Dialog.setInsets(20, 20, 10);
	Dialog.addCheckbox("Brightness and contrast modified", false);  //added by HM
	Dialog.setInsets(20, 20, 10);
	Dialog.addCheckbox("Create only variable threshold curves", false);  //added by HM
	Dialog.show();

	beginFrame = Dialog.getNumber();
	endFrame = Dialog.getNumber();
	if (beginFrame == endFrame)
		exit("Need more than one frame for the analysis");
	thresholdPercentage = Dialog.getNumber();
	showKymograph = Dialog.getCheckbox();
	criticalP = Dialog.getCheckbox();  //added by HM
	bc = Dialog.getCheckbox();  //added by HM
	multithre = Dialog.getCheckbox();  //added by HM

	if (multithre == 1) {
		Dialog.create("Settings for multiple threshold");
		Dialog.addNumber("Lower threshold: ", 70);
		Dialog.addNumber("Upper threshold: ", 100);
		Dialog.show();
		lothre = Dialog.getNumber();
		upthre = Dialog.getNumber();

		nthres = abs(upthre - lothre + 1);
		if (nthres < 1) {
			exit(" Set the upper threshold to higher than the lower one. ");
		}
	} else {
		nthres = 1;
	}


//-----added by HM -----//
	if(criticalP == 1) {
		Dialog.create("Critical Pressure Settings");
		Dialog.addNumber("First gap before increase", 0, 0, 4, "sec");
		Dialog.addNumber("Interval of increase", 2, 0, 4, "min");
		Dialog.addNumber("Frame time", 5, 0, 4, "sec");
		Dialog.addNumber("Pressure increment", 0.1, 1, 4, "bar");
		Dialog.show();
		cpgap = Dialog.getNumber();
		cpinterval = Dialog.getNumber();
		cptime = Dialog.getNumber();
		cpincrement = Dialog.getNumber();
	}
	totalframe = endFrame+1-beginFrame;
//----------------------//

function getLineLength() {
	getVoxelSize(width, height, depth, unit);
	getSelectionCoordinates(x, y);
	dx = x[x.length - 1] - x[0];
	dy = y[y.length - 1] - y[0];
	return sqrt(dx * dx * width * width + dy * dy * height * height);
}

function getLineLengthUnit() {
	getVoxelSize(width, height, depth, unit);
	return unit;
}

function getAverage(array, begin, end) {
	result = 0;
	for (i = begin; i < end; i++)
		result += array[i];
	return result / (end - begin);
}

function getBaseline() {
	profile = getProfile();
	return getAverage(profile, profile.length / 2, profile.length);
}

function parseSeconds(string) {
	if (endsWith(string, " s"))
		return parseFloat(substring(string, 0, lengthOf(string) - 2));
	return 0;
}

function findRightMostDarkPeak(array, threshold) {
	for (i = array.length - 1; i >= 0; i--)
		if (array[i] < threshold)
			return i;
	return -1;
}

	if (multithre == 1) {
		xdummy = newArray(1, 2);
		ydummy = newArray(1, 2);
		Plot.create("Threshold profile", "time", "length", xdummy, ydummy);
		Plot.show();
		plotwindow = getTitle();
	}

setBatchMode(true);

// First, get the baseline by looking at the right half in the
// initial frame. The threshold is set to 80% of that.

	for (k = 0; k < nthres; k++) {

		selectWindow(orititle);
		run("Duplicate...", "title=oricopy duplicate range=1-"+sli);
		makeLine(x1, y1, x2, y2, wid);

		if (multithre == 1) {
			thresholdPercentage = lothre + k;
		}

		threshold = getBaseline() * thresholdPercentage / 100.0;

		lineLength = getLineLength();
		lengthUnit = getLineLengthUnit();
		setSlice(beginFrame);
		beginTime = parseSeconds(getInfo("slice.label"));
		if (beginTime > 0) {
			setSlice(endFrame);
			totalTime = parseSeconds(getInfo("slice.label")) - beginTime;
			timeUnit = "second";
		}
		else {
			totalTime = endFrame + 1 - beginFrame;
			timeUnit = "frame";
		}

		xValues = newArray(endFrame + 1 - beginFrame);
		yValues = newArray(xValues.length);

		for (i = beginFrame; i <= endFrame; i++) {
			selectWindow("oricopy");
			setSlice(i);
			profile = getProfile();
			if (i == beginFrame)
				kymograph = newArray(profile.length * xValues.length);

			offset = i - beginFrame;
			xValues[offset] = totalTime * offset / xValues.length;
			yValues[offset] = findRightMostDarkPeak(profile, threshold) * lineLength / profile.length;
			for (j = 0; j < profile.length; j++)
				kymograph[offset + (profile.length - 1 - j) * xValues.length]
					= profile[j];
		}
		setSlice(currentSlice);
		selectWindow("oricopy");
		close();

		Plot.create("Threshold profile", timeUnit, lengthUnit, xValues, yValues);
		Plot.show();
		plotwindow = getTitle();
		if (multithre == 1) {
			run("Copy");
			close();
			selectWindow(plotwindow);
			if (k > 0) {
				run("Add Slice");
			}
			run("Paste");
			run("Select None");
			getDimensions(plotw, ploth, plotch, plotsli, plotfra);
			drawString("Threshold: "+thresholdPercentage+"%", 5, ploth-5);
		}

		if (multithre == 0) {
setBatchMode(false);

			if (showKymograph && (k==0)) {
				width = xValues.length;
				height = kymograph.length / width;
				newImage("Kymograph", "32-bit", width, height, 1);
				setVoxelSize(totalTime / width, lineLength / height, 1, timeUnit + "/" + lengthUnit);
				setMinAndMax(0, 255);
				setBatchMode(true);
				for (i = 0; i < width; i++)
					for (j = 0; j < height; j++)
						setPixel(i, j, kymograph[i + j * width]);
				setBatchMode(false);
			}
		} else {
print("Frame "+k+" is finished.");
		}
	}

	if (multithre == 1) {
print("");
print(" Macro finished. ");
		exit();
	}


//---Hereafter, added by HM----------------//
	selectWindow(plotwindow);
	setLocation(0,0);
	getLocationAndSize(posx, posy, posw, posh);
	if (showKymograph == 1) {
		selectWindow("Kymograph");
		setLocation(posx, posy+posh);
		selectWindow(plotwindow);
	}

	if(criticalP==1) {
		ymax = 0;
		for(i=0; i<yValues.length; i++) {
			yi = yValues[i];
			if(yi>ymax) {
				ymax = yi;
			}
		}

	//---Make a new plot for critical P
		margin = 40;
		newImage("Critical Pressure", "8-bit White", totalframe*2+margin, ymax+margin, 1);
		cpw = getWidth();
		cph = getHeight();
		setLocation(posx, posy+posh);
		getLocationAndSize(posx2, posy2, posw2, posh2);

		cpgapframe = cpgap/cptime;  //Critical P first gap in num of frames
		cpmeasure = totalframe-cpgapframe;  //Critical P measured duration in num of frames
		cpintframe = cpinterval*60/cptime;  //Critical P interval in num of frames
		nint = floor(cpmeasure/cpintframe);  //Number of intervals
//print("cptime = "+cptime+" sec");
//print("cpgap = "+cpgap+" sec");
//print("cpinterval = "+cpinterval+" min");

//print("cpgapframe(cpgap/cptime) = "+cpgapframe);
//print("cpmeasure(totalframe-cpgap) = "+cpmeasure);
//print("cpintframe(cpinterval*60/cptime) = "+cpintframe);
//print("nint = "+nint);

		setColor(210, 210, 210);
		for(i=0; i<nint; i++) {  //Pressure interval areas
			if(i/2>floor(i/2)) {
				fillRect(margin+cpgapframe*2+cpintframe*2*i, 0, cpintframe*2, ymax);
			}
		}
		for(i=0; i<floor(ymax/50)+1; i++) {  //Horizontal lines
			setLineWidth(1);
			drawLine(margin, cph-margin-50*i, cpw, cph-margin-50*i);
		}
		setColor(150, 150, 150);
		fillRect(margin, 0, cpgapframe*2, ymax);  //First gap area

		setColor(0, 0, 0);
		setFont("SansSerif", 10);
		setLineWidth(1);
		drawLine(margin, 0, margin, cph-margin);
		setLineWidth(1);
		drawLine(margin, cph-margin, cpw, cph-margin);
		for(i=0; i<nint+1; i++) {
			setLineWidth(1);
			drawLine(margin+cpgapframe*2+cpintframe*2*i, ymax, margin+cpgapframe*2+cpintframe*2*i, ymax+5);
			stringw = getStringWidth(cpinterval*i);
			drawString(cpinterval*i, margin+cpgapframe*2+cpintframe*2*i-stringw/2, ymax+20);
		}
		for(i=0; i<floor(ymax/50)+1; i++) {
			setLineWidth(1);
			drawLine(margin-5, cph-margin-50*i, margin, cph-margin-50*i);
			stringw = getStringWidth(50*i);
			drawString(50*i, margin-6-stringw, cph-margin-50*i+8);
		}

		for(i=0; i<nint; i++) {
			cent = margin+cpgapframe*2+cpintframe*2*i+cpintframe;
			stringw = getStringWidth(2+ cpincrement*(i+1)+" bar");
			drawString(2+ cpincrement*(i+1)+" bar", cent-stringw/2, 15);
		}
		drawString("(um)", 2, (cph-margin)/2+5);
		stringw = getStringWidth("Time (min)");
		drawString("Time (min)", margin+totalframe-stringw/2, cph-margin/2+15);

	//---Create plot
		setColor(0, 0, 0);
		for(i=0; i<totalframe-1; i++) {
			setLineWidth(1);
			drawLine(margin+i*2, cph-margin-yValues[i], margin+i*2+1, cph-margin-yValues[i]);
			setLineWidth(1);
			drawLine(margin+i*2+1, cph-margin-yValues[i], margin+(i+1)*2, cph-margin-yValues[i+1]);
		}


	//---Calculate R^2 for each pressure
		rx = newArray(nint);
		ri = newArray(nint);
		for(i=0; i<nint; i++) {
			xi = newArray(cpintframe);
			yi = newArray(cpintframe);
			for(k=cpgapframe; k<cpintframe; k++) {
				if(cpintframe*i+k<yValues.length) {
					xi[k] = cpintframe*i+k;
					yi[k] = yValues[cpintframe*i+k];
				} else {
					xi[k] = cpintframe*i+k;
					yi[k] = NaN;
				}
			}
			Fit.doFit("Straight Line", xi, yi);
			r = Fit.rSquared;
			rx[i] = 2+cpincrement*(i+1);
			ri[i] = r;
		}

	//---Fitting curve for calculated R^2
		Fit.doFit(9, rx, ri);
		Fit.plot();
		setLocation(posx2, posy2+posh2);
		rename("R2");
		Fit.getEquation(9, name, formula);
		a = Fit.p(0);
		b = Fit.p(1);
		c = Fit.p(2);

		r95 = exp((0.95-a)/b)+c;  //Critical pressure estimated from R^2 value
print("Critical pressure = "+r95+" bar");

		}

	bool = getBoolean(" Do you want to SAVE the analyzed data? ");

	if(bool==1) {
		title = getString(" Enter the name of the image file. ", title);
		savedir = getDirectory("Select a directory to SAVE data");
		File.makeDirectory(savedir+title+"_measured");
		savedir2 = savedir+title+"_measured/";

		run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
		if(criticalP==1) {
			selectWindow("Critical Pressure");
			saveAs("Tiff", savedir2+title+"_criticalp.tif");
			close();
		}
		selectWindow("Threshold profile");
		saveAs("Tiff", savedir2+title+"_Plot.tif");
		close();
		selectWindow("Kymograph");
		saveAs("Tiff", savedir2+title+"_kymo.tif");
		close();

		if (criticalP == 1) {
			selectWindow("R2");
			saveAs("Tiff", savedir2+title+"_R2 plot");
			close();
		}


		if(criticalP==1) {

	//---Save plot values
			print("Pressure	X	Y");
			for(i=0; i<xValues.length; i++) {
				if(i<cpgapframe) {
					print(2+"	"+xValues[i]+"	"+yValues[i]);
				} else {
					print(2+cpincrement*(floor((i-cpgapframe)/cpintframe)+1)+"		"+xValues[i]+"	"+yValues[i]);
				}
			}
			selectWindow("Log");
			saveAs("Text", savedir2+title+"_Plot values.txt");

	//---Save line fitting results
print("\\Clear");
print("Pressure	R^2	Start_frame	End_frame");
			for(i=0; i<nint; i++) {
				print(2+cpincrement*(i+1)+"	"+ri[i]+"	"+xi[0]+"	"+xi[cpintframe-1]);
			}
			selectWindow("Log");
			saveAs("Text", savedir2+title+"_Fitting results.txt");

		} else {

	//---Save plot values
			print("X	Y");
			for(i=0; i<xValues.length; i++) {
				print(xValues[i]+"	"+yValues[i]);
			}
			selectWindow("Log");
			saveAs("Text", savedir2+title+"_Plot values.txt");
		}

		print("\\Clear");
	}

	if(bool==0) {
		selectWindow(plotwindow);
		close();
		selectWindow("Kymograph");
		close();
		if(criticalP==1) {
			close();
		}
	}

	print("--Line position, sample ["+orititle+"]--");
	print(" x1 = "+x1);
	print(" y1 = "+y1);
	print(" x2 = "+x2);
	print(" y2 = "+y2);
	print(" Line width = "+wid);
	print("");
	print(" First frame = "+beginFrame);
	print(" Last frame = "+endFrame);
	print("");
	print("Threshold Percentage = "+ thresholdPercentage);

	if (bc == 1) {
		print("");
		print(" *Brightness and contrast were modified. ");
	}

	if(criticalP==1) {
		print("");
		print("---Critical pressure conditions---");
		print("First gap: "+cpgap+" sec");
		print("Interval of increase: "+cpinterval+" min");
		print("Frame time: "+cptime+" sec");
		print("Pressure increment: "+cpincrement+" bar");
		print("");
		print("Critical pressure: "+r95+" bar");
	}

	if(bool==1) {
		selectWindow("Log");
		saveAs("Text", savedir2+title+"_Conditions.txt");
	}

	print("");
	print("  Macro finished.");

	selectWindow(orititle);
}
